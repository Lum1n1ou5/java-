
/*修饰符 方法返回值类型 方法名（形参列表） 记得要有这个return
    数据类型：比如说基本数据类型（byte,short,int,long,floar,double,char,boolean），也可以是引用数据类型
    如果返回值什么都没有返回，就用void
*/

public class Test03 {
public static int add(int num1,int num2){
    int sum = 0;
    sum += num1;
    sum += num2;
    return sum;
    
}

    public static void main(String[] args) {
    int num = add(20, 30);
    System.out.println(num);
    }
    
}


//------------------------------------------------------------------------------------------------------------------
/* 方法重载*/
1）add(int a) 和 add(int b)  不构成重载，相当于方法的重复定义
2）public static int add(int a)和 public static void add(int b)  也不构成重载、
方法名相同，形参名字不同才是重载


public class MethodOverloadingExample {
    
    // 重载方法：没有参数
    public void print() {
        System.out.println("No parameters");
    }
    
    // 重载方法：一个整型参数
    public void print(int a) {
        System.out.println("Integer parameter: " + a);
    }
    
    // 重载方法：两个整型参数
    public void print(int a, int b) {
        System.out.println("Two integer parameters: " + a + ", " + b);
    }
    
    // 重载方法：一个字符串参数
    public void print(String s) {
        System.out.println("String parameter: " + s);
    }

    public static void main(String[] args) {
        MethodOverloadingExample example = new MethodOverloadingExample();
        
        // 调用没有参数的方法
        example.print();
        
        // 调用一个整型参数的方法
        example.print(10);
        
        // 调用两个整型参数的方法
        example.print(20, 30);
        
        // 调用一个字符串参数的方法
        example.print("Hello, World!");
    }
}

/*
输出结果：No parameters
Integer parameter: 10
Two integer parameters: 20, 30
String parameter: Hello, World!
*/


//------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

public class UserInputExample {
    public static void main(String[] args) {
        // 创建Scanner对象，用于从控制台读取用户输入
        Scanner scanner = new Scanner(System.in);
        
        // 提示用户输入一个字符串
        System.out.print("请输入你的名字: ");
        String name = scanner.nextLine(); // 读取整行输入的字符串
        
        // 提示用户输入一个整数
        System.out.print("请输入你的年龄: ");
        int age = scanner.nextInt(); // 读取一个整数
        
        // 提示用户输入一个浮点数
        System.out.print("请输入你的身高 (米): ");
        double height = scanner.nextDouble(); // 读取一个浮点数
        
        // 输出用户输入的信息
        System.out.println("你好，" + name + "。你的年龄是 " + age + " 岁，身高是 " + height + " 米。");
        
        // 关闭Scanner
        scanner.close();
    }
}


//------------------------------------------------------------------------------------------------------------------

// 定义一个简单的类，名为Person
class Person {
    // 定义类的属性
    String name;
    int age;

    // 定义类的构造方法，用于初始化对象
    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // 定义类的方法，用于展示信息
    void displayInfo() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

public class Main {
    public static void main(String[] args) {
        // 使用new关键字创建Person类的对象
        Person person1 = new Person("Alice", 30);

        // 通过对象调用方法
        person1.displayInfo();
    }
}

//------------------------------------------------------------------------------------------------------------------

//求这段数组当中的最大值


public class Maxnumber {
    public static void main(String[] args) {
       int[] arr = {65,46,54,64,98,46,51,65,468};

        int maxNmb = arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > arr[0]) {
                maxNmb = arr[i];
                
            }
        }
        System.out.println(maxNmb);
    }
    
}

//路子二：用调用方法的方式求出最大值
左边是正确的答案                                                右边输出的是地址


public class Maxnumber {                                        public class Maxnumber {
    public static void main(String[] args) {                        public static void main(String[] args) {
       int[] arr = {65,46,54,64,98,46,51,65,468};                        int[] arr = {65, 46, 54, 64, 98, 46, 51, 65, 468};
                                                                        // 调用getMaxNum方法，但没有使用返回值
        int maxValue = getMaxNum(arr);                                    getMaxNum(arr);
                                                                         // 直接打印数组对象
        System.out.println(maxValue);                                     System.out.println(arr);
    }                                                                    }                                                                    
            
    public static int getMaxNum(int[] arr){                    public static int getMaxNum(int[] arr){
        int maxNmb = arr[0];                                       int maxNmb = arr[0];
        for (int i = 0; i < arr.length; i++) {                     for (int i = 0; i < arr.length; i++) {
            if (arr[i] > arr[0]) {                                      if (arr[i] > maxNmb) {
                maxNmb = arr[i];                                        maxNmb = arr[i];
                                                                        }
            }                                                       }
        }
        return maxNmb;                                               return maxNmb;
    }                                                                }
    
}                                                                     }


//------------------------------------------------------------------------------------------------------------------
