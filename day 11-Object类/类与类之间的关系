/--------------------------------------------------------------------------------------------------------
1. 继承关系（Inheritance）
继承是一种 “is-a” 关系，一个类可以继承另一个类，从而继承父类的属性和方法。继承的关键字是 extends。

单继承: Java 中的一个类只能继承一个直接父类。

class Animal {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("The dog barks.");
    }
}

public class Test {
    public static void main(String[] args) {
        Dog dog = new Dog();
        dog.eat();  // 继承自 Animal
        dog.bark(); // Dog 自己的方法
    }
}


/--------------------------------------------------------------------------------------------------------
2. 实现关系（Implementation）
实现是一种 “can-do” 关系，表示类实现一个或多个接口。接口是抽象的，它定义了类必须实现的方法。实现的关键字是 implements。

多接口实现: 一个类可以实现多个接口。

interface Swimmable {
    void swim();
}

interface Runnable {
    void run();
}

class Human implements Swimmable, Runnable {
    public void swim() {
        System.out.println("The human can swim.");
    }

    public void run() {
        System.out.println("The human can run.");
    }
}

public class Test {
    public static void main(String[] args) {
        Human human = new Human();
        human.swim();
        human.run();
    }
}


/--------------------------------------------------------------------------------------------------------
3. 组合关系（Composition）
组合关系是一种 “has-a” 关系，一个类可以包含另一个类的对象作为其成员变量。这种关系体现了一个类是由多个其他类组成的。

强组合（Composition）: 一个类完全拥有另一个类的对象，生命周期同步。被组合的对象的生命周期由组合对象控制。

class Engine {
    void start() {
        System.out.println("Engine starts.");
    }
}

class Car {
    private Engine engine;

    public Car() {
        engine = new Engine();
    }

    void startCar() {
        engine.start();
        System.out.println("Car starts.");
    }
}

public class Test {
    public static void main(String[] args) {
        Car car = new Car();
        car.startCar();
    }
}

/--------------------------------------------------------------------------------------------------------
4. 聚合关系（Aggregation）
聚合关系也是一种 “has-a” 关系，但与组合不同，聚合中的被聚合对象的生命周期独立于聚合对象。聚合对象可以存在于多个聚合者中。

弱聚合（Aggregation）: 类之间是松散的关系，被聚合的对象可以独立存在于多个对象中。

class Library {
    private List<Book> books;

    public Library(List<Book> books) {
        this.books = books;
    }

    public List<Book> getBooks() {
        return books;
    }
}

class Book {
    private String title;

    public Book(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }
}

public class Test {
    public static void main(String[] args) {
        Book book1 = new Book("Book One");
        Book book2 = new Book("Book Two");
        List<Book> books = new ArrayList<>();
        books.add(book1);
        books.add(book2);

        Library library = new Library(books);

        for (Book book : library.getBooks()) {
            System.out.println(book.getTitle());
        }
    }
}

/--------------------------------------------------------------------------------------------------------
5. 依赖关系（Dependency）
依赖关系是一种 “uses-a” 关系，表示一个类依赖于另一个类的对象，通常是在方法参数中传递对象来实现的。



class Printer {
    void print(Document doc) {
        System.out.println("Printing document: " + doc.getContent());
    }
}

class Document {
    private String content;

    public Document(String content) {
        this.content = content;
    }

    public String getContent() {
        return content;
    }
}

public class Test {
    public static void main(String[] args) {
        Document doc = new Document("Hello World");
        Printer printer = new Printer();
        printer.print(doc);  // Printer 依赖 Document
    }
}


总结
继承（Inheritance）: 类与类之间的 “is-a” 关系。
实现（Implementation）: 类与接口之间的 “can-do” 关系。
组合（Composition）: 强 “has-a” 关系，对象的生命周期依赖于组合对象。
聚合（Aggregation）: 弱 “has-a” 关系，对象的生命周期独立于聚合对象。
依赖（Dependency）: “uses-a” 关系，通常体现在方法参数中。
